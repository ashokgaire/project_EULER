"""

problem 10 



The sequence of triangle numbers is generated by adding the natural numbers.

 So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 The first ten terms would be:1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

import time
import functools

stime = time.time()

#we start wth number 28
n = 28

while True:
    # sum of number from 1 to n
    triangle_number = n*(n+1)/2
    n = n+1
    # a dict to stre powers of prime
    dic = {}

    # startiing with a prime number 2
    i = 2
    #for loop to factor a number
    while i <= triangle_number:
        #if i divides the number , then it is a prime factor
        if triangle_number % i == 0:
            #changing the value of number so that we will not divide it with the same number again and again
            triangle_number = triangle_number/i

            # we are storing the value in terms of power of the prime number

            if i in dic:
                dic[i] +=1
            else:
                dic[i] = 1
            i -=1
        i +=1

     # increasing the value of power by 1 to find the number of divisors
    powers = map(lambda x:(x+1),dic.values())
    

    # number of divisors
    divisors = functools.reduce(lambda x,y:x*y,powers)
    print(divisors)

    # conition to check if divisors > 500
    if divisors > 500:
        print((n-1)*(n)/2)
        break

etime = time.time()


print(etime-stime)